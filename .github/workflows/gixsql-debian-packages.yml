name: gixsql-debian-packages

on:
  workflow_dispatch
  
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

env:
  GIXSQLMAJ: 1
  GIXSQLMIN: 0
  GIXSQLREL: 21dev
  GIX_REVISION: ${{ github.run_attempt }}
  GIXSQL_BRANCH: ${{ github.ref_name }}
  INSTALL_PREFIX: usr
  HOST_PLATFORM: x64

permissions:
  contents: read

jobs:

  debian-10-x64:
    runs-on: ubuntu-latest
    container:
      image: debian:10

    steps:
    
    - name: Build
      env:
        DIST: debian-10
      run: |
        export WORKSPACE=$(pwd)
        export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        apt update
        apt install -y build-essential automake autoconf pkg-config libmariadb-dev-compat libmariadb-dev libpq-dev unixodbc-dev flex libspdlog-dev libfmt-dev git wget
        git clone --recurse-submodules https://github.com/alexbodn/gixsql.git --branch ${{ env.GIXSQL_BRANCH }} .
        echo "HOST_PLATFORM      : ${{env.HOST_PLATFORM}}"
        echo "BUILD_CONFIGURATION: ${{env.BUILD_CONFIGURATION}}"
        wget http://ftp.debian.org/debian/pool/main/b/bison/bison_3.7.5+dfsg-1_amd64.deb
        dpkg -i bison_3.7.5+dfsg-1_amd64.deb
        chmod 755 ./prepbuild.sh && ./prepbuild.sh /E
        chmod 755 ./prepdist.sh && ./prepdist.sh
        autoreconf --install --force
        ./configure --prefix=$WORKSPACE/pkg/${{ env.INSTALL_PREFIX }}
        make -j$(nproc) && make install-strip
        chmod 755 ./deploy/installers/linux/mkdeb-gixsql.sh && ./deploy/installers/linux/mkdeb-gixsql.sh
    
#    - name: Build package
#      env:
#          DIST: debian-10
#
#      shell: bash
#      run: |
#        chmod 755 $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh && $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh
#        ls -l
#        ls -lR $WORKSPACE/pkg
        
    - name: Archive production artifacts
      env:
          DIST: debian-10 
      uses: actions/upload-artifact@v3
      with:
        name: gixsql-${{ env.DIST }}-${{ env.HOST_PLATFORM }}-${{ env.GIXSQLMAJ}}.${{ env.GIXSQLMIN}}.${{ env.GIXSQLREL}}-${{ env.GIX_REVISION}}
        path: |
          gixsql-${{ env.DIST }}-${{ env.HOST_PLATFORM }}-${{ env.GIXSQLMAJ}}.${{ env.GIXSQLMIN}}.${{ env.GIXSQLREL}}-${{ env.GIX_REVISION}}.deb


  debian-11-x64:
    runs-on: ubuntu-latest
    container:
      image: debian:11

    steps:
    
    - name: Build
      env:
        DIST: debian-11
      run: |
        export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        export WORKSPACE=$(pwd)
        apt update
        apt install -y build-essential bison automake autoconf pkg-config libmariadb-dev-compat libmariadb-dev libpq-dev unixodbc-dev flex libspdlog-dev libfmt-dev git wget
        git clone --recurse-submodules https://github.com/alexbodn/gixsql.git --branch ${{ env.GIXSQL_BRANCH }} .
        echo "HOST_PLATFORM      : ${{env.HOST_PLATFORM}}"
        echo "BUILD_CONFIGURATION: ${{env.BUILD_CONFIGURATION}}"
        wget http://ftp.debian.org/debian/pool/main/b/bison/bison_3.7.5+dfsg-1_amd64.deb
        dpkg -i bison_3.7.5+dfsg-1_amd64.deb
        chmod 755 ./prepbuild.sh && ./prepbuild.sh /E
        chmod 755 ./prepdist.sh && ./prepdist.sh
        autoreconf --install --force
        ./configure --prefix=$WORKSPACE/pkg/${{ env.INSTALL_PREFIX }}
        make -j$(nproc) && make install-strip
        chmod 755 $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh && $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh
    
#    - name: Build package
#      env:
#          DIST: debian-11
#          WORKSPACE: ${{ github.workspace }}
#      shell: bash
#      run: |
#        chmod 755 $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh && $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh
#        ls -l
#        ls -lR $WORKSPACE/pkg
        
    - name: Archive production artifacts
      env:
          DIST: debian-11
      uses: actions/upload-artifact@v3
      with:
        name: gixsql-${{ env.DIST }}-${{ env.HOST_PLATFORM }}-${{ env.GIXSQLMAJ}}.${{ env.GIXSQLMIN}}.${{ env.GIXSQLREL}}-${{ env.GIX_REVISION}}
        path: |
          gixsql-${{ env.DIST }}-${{ env.HOST_PLATFORM }}-${{ env.GIXSQLMAJ}}.${{ env.GIXSQLMIN}}.${{ env.GIXSQLREL}}-${{ env.GIX_REVISION}}.deb


  debian-12-x64:
    runs-on: ubuntu-latest
    container:
      image: debian:12

    steps:
    
    - name: Build
      env:
        DIST: debian-12
      run: |
        export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        export WORKSPACE=$(pwd)
        apt update
        apt install -y build-essential bison automake autoconf pkg-config libmariadb-dev-compat libmariadb-dev libpq-dev unixodbc-dev flex libspdlog-dev libfmt-dev git wget libtool
        git clone --recurse-submodules https://github.com/alexbodn/gixsql.git --branch ${{ env.GIXSQL_BRANCH }} .
        echo "HOST_PLATFORM      : ${{env.HOST_PLATFORM}}"
        echo "BUILD_CONFIGURATION: ${{env.BUILD_CONFIGURATION}}"
        chmod 755 ./prepbuild.sh && ./prepbuild.sh /E
        chmod 755 ./prepdist.sh && ./prepdist.sh
        autoreconf --install --force
        ./configure --prefix=$WORKSPACE/pkg/${{ env.INSTALL_PREFIX }}
        make -j$(nproc) && make install-strip
        chmod 755 $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh && $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh
    
#    - name: Build package
#      env:
#          DIST: debian-12
#          WORKSPACE: ${{ github.workspace }}
#      shell: bash
#      run: |
#        chmod 755 $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh && $WORKSPACE/deploy/installers/linux/mkdeb-gixsql.sh
#        ls -l
#        ls -lR $WORKSPACE/pkg
        
    - name: Archive production artifacts
      env:
          DIST: debian-12
      uses: actions/upload-artifact@v3
      with:
        name: gixsql-${{ env.DIST }}-${{ env.HOST_PLATFORM }}-${{ env.GIXSQLMAJ}}.${{ env.GIXSQLMIN}}.${{ env.GIXSQLREL}}-${{ env.GIX_REVISION}}
        path: |
          gixsql-${{ env.DIST }}-${{ env.HOST_PLATFORM }}-${{ env.GIXSQLMAJ}}.${{ env.GIXSQLMIN}}.${{ env.GIXSQLREL}}-${{ env.GIX_REVISION}}.deb





#######on: [push, pull_request]
#######
#######jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: bookworm
#######          - arch: aarch64
#######            distro: bullseye 
#######          - arch: ppc64le
#######            distro: alpine_latest
#######          - arch: none
#######            distro: none
#######            base_image: riscv64/busybox
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -q -y
                apt-get install -q -y git
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cp $(which git) "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"

